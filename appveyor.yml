# Notes:
#   - Minimal appveyor.yml file is an empty file. All sections are optional.
#   - Indent each level of configuration with 2 spaces. Do not use tabs!
#   - All section names are case-sensitive.
#   - Section names should be unique on each level.

#---------------------------------#
#      general configuration      #
#---------------------------------#

# version format
version: 4.3.{build}

image:
  - Visual Studio 2019
  
# branches to build
branches:
  # whitelist
  only:
    - develop

  # blacklist
  # except:
  #   - gh-pages

# Do not build on tags (GitHub only)
skip_tags: true

#---------------------------------#
#    environment configuration    #
#---------------------------------#
environment:
  global:
    1_13: &1_13 1.13.0
    HDF5_1_13_VER: *1_13
    1_12: &1_12 1.12.0
    HDF5_1_12_VER: *1_12
    WINDOWS_BASEKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18195/w_BaseKit_p_2021.4.0.3421_offline.exe
    WINDOWS_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18247/w_HPCKit_p_2021.4.0.3340_offline.exe
    LINUX_BASEKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18236/l_BaseKit_p_2021.4.0.3422_offline.sh
    LINUX_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18211/l_HPCKit_p_2021.4.0.3347_offline.sh
    MACOS_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18242/m_HPCKit_p_2021.4.0.3389_offline.dmg
    WINDOWS_CPP_COMPONENTS: intel.oneapi.win.cpp-compiler
    WINDOWS_FORTRAN_COMPONENTS: intel.oneapi.win.ifort-compiler
    WINDOWS_DPCPP_COMPONENTS: intel.oneapi.win.dpcpp-compiler
    LINUX_CPP_COMPONENTS: intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic
    LINUX_FORTRAN_COMPONENTS: intel-oneapi-compiler-fortran
    LINUX_DPCPP_COMPONENTS: intel-oneapi-compiler-dpcpp-cpp
    LINUX_CPP_COMPONENTS_WEB: intel.oneapi.lin.dpcpp-cpp-compiler-pro
    LINUX_FORTRAN_COMPONENTS_WEB: intel.oneapi.lin.ifort-compiler
    LINUX_DPCPP_COMPONENTS_WEB: intel.oneapi.lin.dpcpp-cpp-compiler
    MACOS_CPP_COMPONENTS: intel.oneapi.mac.cpp-compiler
    MACOS_FORTRAN_COMPONENTS: intel.oneapi.mac.ifort-compiler

  matrix:
  - build_opt: -D CGNS_BUILD_SHARED:BOOL=OFF -D CGNS_USE_SHARED:BOOL=OFF -D CGNS_ENABLE_64BIT:BOOL=ON
    HDF5_VER: *1_12
    HDF_DIR: "/Program Files/HDF_Group/HDF5/%HDF5_VER%/cmake"
  - build_opt: -D CGNS_BUILD_SHARED:BOOL=ON -D CGNS_USE_SHARED:BOOL=ON -D CGNS_ENABLE_64BIT:BOOL=ON
    HDF5_VER: *1_12
    HDF_DIR: "/Program Files/HDF_Group/HDF5/%HDF5_VER%/cmake"

for:
-
  matrix:
    only:
      - image: Visual Studio 2019
  environment:
      GENERATOR: "Visual Studio 16 2019"
      ARCH: "x64"


# scripts that are called at very beginning, before repo cloning
init:
  - git config --global core.autocrlf input

# clone directory
clone_folder: c:\projects\CGNS

# scripts that run after cloning repository
install:
  - cmd: scripts/install_windows.bat  %WINDOWS_HPCKIT_URL% %WINDOWS_CPP_COMPONENTS%:%WINDOWS_FORTRAN_COMPONENTS%
  #- cmd: scripts/install_windows.bat %WINDOWS_HPCKIT_URL% %WINDOWS_CPP_COMPONENTS%
  #- cmd: scripts/install_windows.bat %WINDOWS_HPCKIT_URL% %WINDOWS_FORTRAN_COMPONENTS%
  #- cmd: curl -L --output basekit.exe --url %WINDOWS_BASEKIT_URL%
  #- cmd: start /b /wait basekit.exe -s -x -f basekit-extracted --log extract-basekit.log
  #- cmd: curl -L --output hpckit.exe --url %WINDOWS_HPCKIT_URL%
  #- cmd: start /b /wait hpckit.exe -s -x -f hpckit-extracted --log extract-hpckit.log
  #- cmd: hpckit-extracted\bootstrapper.exe -s --action install --components=%WINDOWS_CPP_COMPONENTS%:%WINDOWS_MPI_COMPONENTS%:%WINDOWS_FORTRAN_COMPONENTS% --eula=accept -p=NEED_VS2017_INTEGRATION=0 -p=NEED_VS2019_INTEGRATION=1 --log-dir=.
  #cmd: scripts/install_windows.bat %WINDOWS_HPCKIT_URL% %WINDOWS_FORTRAN_COMPONENTS%  
  # by default, all script lines are interpreted as batch
  #- echo This is batch
  # to run script as a PowerShell command prepend it with ps:
  #- ps: Write-Host 'This is PowerShell'
  # batch commands start from cmd:
  #- cmd: echo This is batch again
  #- cmd: set MY_VAR=12345
# install hdf5
  #- mkdir 1.13
  #- cd 1.13
  #- set HDF5_1_13=%HDF5_1_13_VER%
  #- curl -O https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.13/hdf5-1.13.0/bin/windows/hdf5-%HDF5_1_13_VER%-Std-win10_64-vs16-Intel.zip
  #- ps: Expand-Archive hdf5-$($env:HDF5_1_13_VER)-Std-win10_64-vs16-Intel.zip -DestinationPath .
  #- cd hdf
  #- msiexec /i HDF5-%HDF5_1_13_VER%-win64.msi /quiet /qn /norestart /log install.log
  #- type install.log
  #- cd ..\..
  - mkdir 1.12
  - cd 1.12
  - set HDF5_1_12=%HDF5_1_12_VER%
  - curl -O https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.12/hdf5-1.12.0/bin/hdf5-%HDF5_1_12_VER%-Std-win10_64-vs16-Intel.zip
  - ps: Expand-Archive hdf5-$($env:HDF5_1_12_VER)-Std-win10_64-vs16-Intel.zip -DestinationPath .
  - cd hdf
  - msiexec /i HDF5-%HDF5_1_12_VER%-win64.msi /quiet /qn /norestart /log install.log
  - type install.log
  - cd ..\..

#---------------------------------#
#       build configuration       #
#---------------------------------#

# build platform, i.e. x86, x64, Any CPU. This setting is optional.
platform: Any CPU

# to add several platforms to build matrix:
#platform:
#  - x86
#  - Any CPU

# build Configuration, i.e. Debug, Release, etc.
configuration:
  - Release

# scripts to run before build
before_build:
  - mkdir c:\projects\CGNS_BUILD
  - cd c:\projects\CGNS_BUILD
  - cmd: call "C:\Program Files (x86)\Intel\oneAPI\setvars.bat" intel64 vs2019
  - cmd: where icl
  - cmd: where icx
#  - cmd: where ifx
  - cmd: where ifort
#  - cmd: icl /help
#  - cmd: icx /help
#  - cmd: ifort /help
  - echo Running cmake...
  - cd c:\projects\CGNS_BUILD
  - cmake --version
  - SET HDF5_DIR=/Program Files/HDF_Group/HDF5/%HDF5_VER%/cmake
  - SET HDF5_ROOT=/Program Files/HDF_Group/HDF5/%HDF5_VER%
  - cmake -G"NMake Makefiles" ^
     %build_opt% ^
     -D CMAKE_C_COMPILER:PATH="C:\Program Files (x86)\Intel\oneAPI\compiler\latest\windows\bin\intel64\icl.exe" ^
     -D CMAKE_C_FLAGS:STRING="" ^
     -D CMAKE_Fortran_COMPILER:PATH="C:\Program Files (x86)\Intel\oneAPI\compiler\latest\windows\bin\intel64\ifort.exe" ^
     -D CMAKE_BUILD_TYPE:STRING=%configuration% ^
     -D HDF5_NEED_ZLIB:BOOL=ON ^
     -D CMAKE_STATIC_LINKER_FLAGS:STRING="" ^
     -D CGNS_ENABLE_HDF5:BOOL=ON ^
     -D HDF5_DIR:PATH="C:\Program Files\HDF_Group\HDF5\1.12.0\cmake" ^
     -D CMAKE_PREFIX_PATH:PATH="C:\Program Files\HDF_Group\HDF5\/%HDF5_VER%\cmake" ^
     -D CGNS_ENABLE_TESTS:BOOL=ON ^
     -D CGNS_ENABLE_LFS:BOOL=OFF ^
     -D CGNS_BUILD_CGNSTOOLS:BOOL=OFF ^
     -D CGNS_ENABLE_SCOPING:BOOL=OFF ^
     -D CGNS_ENABLE_FORTRAN:BOOL=ON ^
     -D CGNS_ENABLE_PARALLEL:BOOL=OFF ^
     -D CMAKE_INSTALL_PREFIX:PATH="." c:\projects\CGNS

build_script:
      - cd c:\projects\CGNS
      - dir
      - cd  C:\Program Files\HDF_Group\HDF5\1.12.0\bin
      - dir
#      - cmd: scripts/build_windows.bat fortran "" %SAMPLES_TAG%
      - cd c:\projects\CGNS_BUILD
      - cmd: cmake --build . --config "%configuration%"

test_script:
  - cmd: set PATH=C:\projects\CGNS_BUILD\src;%PATH%
  - cmd: set PATH=C:\projects\CGNS_BUILD\src\%configuration%;%PATH%
  - cmd: set PATH=C:\Program Files\HDF_Group\HDF5\%HDF5_VER%\bin;%PATH%
  - cmd: ctest .

after_test:
  - cmd: cmake --install . --config "%configuration%"
